selected = c("marketing", "research", "sales"))
dateRangeInput(inputId = "date_range",
label = h4("Date Range"),
start = "2018-01-01",
end = today(),
min = min(sales_data_tbl$date),
max = max(sales_data_tbl$date),
startview = "year")
library(flexdashboard)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(bslib)
library(dplyr)
library(tidyr)
library(ggplot2)
library(xgboost)
library(plotly)
library(DT)
tags$style("@import url(https://use.fontawesome.com/releases/v6.1.1/css/all.css);")
# Loading Data
curvas <- readRDS( file = "data/curvas.RDS")
coeff <- readRDS( file = "data/coeff.RDS")
View(coeff)
View(curvas)
source(file = "quadratic_plateau.R")
data_ex <- read.csv(file = "data_corn.csv", header = TRUE)
ggplotly(quadratic_plateau(data = data_ex, yield = y, Nav = x, plot = TRUE))
View(data_ex)
model <- quadratic_plateau(data = data_ex, yield = y, Nav = x, plot = FALSE, tidy = TRUE)
install.packages("readxl")
CSTV
ggplot2::annotate("text",label = paste("Disp. Opt. Agr. =", round(CSTV,1), "kg N/ha"),
x = CSTV, y = 0, angle = 90, hjust = 0, vjust = 1.5, col = "grey25") } +
# Loading Data
curvas <- readRDS( file = "data/curvas.RDS")
View(curvas)
library(tidyverse)
write.csv(curvas, "test.csv", row.names=FALSE)
curvas <- readRDS( file = "data/curvas.RDS")
library(flexdashboard)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(bslib)
library(dplyr)
library(tidyr)
library(ggplot2)
library(xgboost)
library(plotly)
library(DT)
library(readxl)
tags$style("@import url(https://use.fontawesome.com/releases/v6.1.1/css/all.css);")
# Loading Data
curvas <- readRDS( file = "data/curvas.RDS")
# Loading Data
curvas <- readRDS( file = "data/curvas.RDS")
coeff <- readRDS( file = "data/coeff.RDS")
write.csv(curvas, "test.csv", row.names=FALSE)
library(flexdashboard)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(bslib)
library(dplyr)
library(tidyr)
library(ggplot2)
library(xgboost)
library(plotly)
library(DT)
library(readxl)
tags$style("@import url(https://use.fontawesome.com/releases/v6.1.1/css/all.css);")
# Loading Data
curvas <- readRDS( file = "data/curvas.RDS")
coeff <- readRDS( file = "data/coeff.RDS")
write.csv(curvas, "test.csv", row.names=FALSE)
source(file = "quadratic_plateau.R")
data_test <- read.csv("test.csv", header = TRUE)
View(data_test)
data_test <- read.csv("test.csv", header = TRUE)
data_test <- read.csv(file = "test.csv", header = TRUE)
data_transformed <- quadratic_plateau(data = data_test,
yield = data_test[,2],
Nav = data_test[,1],
plot = FALSE,
tidy = TRUE)
data_test <- read.csv(file = "test", header = TRUE)
data_test <- read.csv(file = "test.csv", header = TRUE)
rmv(data_test)
rm(data_test)
data_test <- read.csv(file = "test.csv", header = TRUE)
data_test <- read.csv(file = "data_corn.csv", header = TRUE)
library(flexdashboard)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(bslib)
library(dplyr)
library(tidyr)
library(ggplot2)
library(xgboost)
library(plotly)
library(DT)
library(readxl)
tags$style("@import url(https://use.fontawesome.com/releases/v6.1.1/css/all.css);")
data_test <- read.csv(file = "data_corn.csv", header = TRUE)
source(file = "quadratic_plateau.R")
data_transformed <- quadratic_plateau(data = data_test,
yield = data_test[,2],
Nav = data_test[,1],
plot = FALSE,
tidy = TRUE)
View(data_transformed)
data_test <- read.csv(file = "test.csv", header = TRUE)
data_transformed <- quadratic_plateau(data = data_test,
yield = data_test[,2],
Nav = data_test[,1],
plot = FALSE,
tidy = TRUE)
View(data_transformed)
test <- read_excel("test.xlsx")
test <- read_excel(path = "test.xlsx")
test <- read_excel(path = "test")
test <- read_excel(path = "test.xlsx")
library(readxl)
test <- read_excel(path = "test.xlsx")
View(test)
test <- read_excel(path = "test.xlsx")
library(flexdashboard)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(bslib)
library(dplyr)
library(tidyr)
library(ggplot2)
library(xgboost)
library(plotly)
library(DT)
library(readxl)
tags$style("@import url(https://use.fontawesome.com/releases/v6.1.1/css/all.css);")
source(file = "quadratic_plateau.R")
test <- read_excel(path = "test.xlsx")
View(test)
View(test)
test[,2]
runApp('K-State/Senegal-visualizing-data-app/Senegal App.R')
runApp('K-State/GeoComp-APP/Codes/General Geographical App.R')
?icon
?renderDataTable
# Core
library(tidyverse)
# Core
library(tidyverse)
library(flexdashboard)
library(shiny)
library(shinyWidgets)
library(tidyquant)
# Core
library(tidyverse)
library(flexdashboard)
library(shiny)
library(shinyWidgets)
library(tidyquant)
# Interactive Visualizations
library(plotly)
# Core
library(tidyverse)
library(flexdashboard)
library(shiny)
library(shinyWidgets)
library(tidyquant)
# Interactive Visualizations
library(plotly)
#Database
library(odbc)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "../00_data/bikes_database.db")
#dbListTables(con)
bikes_tbl <- tbl(con, "bikes")
bikeshops_tbl <- tbl(con, "bikeshops")
orderlines_tbl <- tbl(con, "orderlines")
processed_data_tbl <- orderlines_tbl %>%
left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id")) %>%
left_join(bikes_tbl, by = c("product.id" ="bike.id")) %>%
mutate(extended_price = quantity * price) %>%
collect()
processed_data_tbl <- processed_data_tbl %>%
mutate(order.date = ymd(order.date)) %>%
separate(location, into = c("city", "state"), sep = ", ") %>%
select(order.date, order.id, order.line, state, quantity, price, extended_price)
dbDisconnect(con)
processed_data_tbl <- processed_data_tbl %>%
mutate(order.date = ymd(order.date)) %>%
separate(location, into = c("city", "state"), sep = ", ") %>%
separate(descripition, into = c("category_1", "category_2", "frame_material"),
sep = " - ")%>%
select(order.date, order.id, order.line, state, quantity, price, extended_price, category_1:frame_material) %>%
View(processed_data_tbl)
View(orderlines_tbl)
processed_data_tbl <- processed_data_tbl %>%
mutate(order.date = ymd(order.date)) %>%
separate(location, into = c("city", "state"), sep = ", ") %>%
separate(descripition, into = c("category_1", "category_2", "frame_material"),
sep = " - ")%>%
select(order.date, order.id, order.line, state, quantity, price, extended_price, category_1:frame_material)
con <- dbConnect(RSQLite::SQLite(), "../00_data/bikes_database.db")
con <- dbConnect(RSQLite::SQLite(), "../00_data/bikes_database.db")
con <- dbConnect(RSQLite::SQLite(), "../00_data/bikes_database.db")
#dbListTables(con)
bikes_tbl <- tbl(con, "bikes")
con <- dbConnect(RSQLite::SQLite(), "00_data/bikes_database.db")
con <- dbConnect(RSQLite::SQLite(), "00_data/bikes_database.db")
library(odbc)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "00_data/bikes_database.db")
con <- dbConnect(RSQLite::SQLite(), "00_data/bikes_database.db")
con <- dbConnect(RSQLite::SQLite(), "../00_data/bikes_database.db")
# dbListTables(con)
bikes_tbl <- tbl(con, "bikes")
con <- dbConnect(RSQLite::SQLite(), "00_data/bikes_database.db")
library(flexdashboard)
library(shiny)
library(shinyWidgets)
# Core
library(tidyverse)
library(tidyquant)
# Interactive Visualizations
library(plotly)
#Database
library(odbc)
library(RSQLite)
# dbListTables(con)
bikes_tbl <- tbl(con, "bikes")
con <- dbConnect(RSQLite::SQLite(), "../00_data/bikes_database.db")
# dbListTables(con)
bikes_tbl <- tbl(con, "bikes")
bikeshops_tbl <- tbl(con, "bikeshops")
orderlines_tbl <- tbl(con, "orderlines")
processed_data_tbl <- orderlines_tbl %>%
left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id")) %>%
left_join(bikes_tbl, by = c("product.id" ="bike.id")) %>%
mutate(extended_price = quantity * price) %>%
collect()
processed_data_tbl <- processed_data_tbl %>%
mutate(order.date = ymd(order.date)) %>%
separate(location, into = c("city", "state"), sep = ", ") %>%
separate(descripition, into = c("category_1", "category_2", "frame_material"),
sep = " - ")%>%
select(order.date, order.id, order.line, state, quantity, price, extended_price, category_1:frame_material)
processed_data_tbl <- processed_data_tbl %>%
mutate(order.date = ymd(order.date)) %>%
separate(location, into = c("city", "state"), sep = ", ") %>%
separate(description, into = c("category_1", "category_2", "frame_material"),
sep = " - ")%>%
select(order.date, order.id, order.line, state, quantity, price, extended_price, category_1:frame_material)
dbDisconnect(con)
View(processed_data_tbl)
runApp('K-State/GeoComp-APP/Codes/General Geographical App.R')
runApp('K-State/Senegal-visualizing-data-app/Senegal App.R')
library(flexdashboard)
library(shiny)
library(shinyWidgets)
library(shinyjs)
# Core
library(tidyverse)
library(tidyquant)
# Interactive Visualizations
library(plotly)
# Database
library(odbc)
library(RSQLite)
library(shinyjs)
processed_data_tbl
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length()
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price)
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price)
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ",")
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price)
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6)
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price)
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6, accuracy = 1)
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price)
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6, accuracy = 0.1)
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price)
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6, accuracy = 0.1, suffix = "M")
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price),
wise_metric = sum(str_detect(category_1, "Mountain"))
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6, accuracy = 0.1, suffix = "M")
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price),
wise_metric = sum(str_detect(category_1, "Road"))
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6, accuracy = 0.1, suffix = "M")
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price),
wise_metric = sum(str_detect(category_1, "Mountain")) / sum(str_detect(category_1, "Road"))
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6, accuracy = 0.1, suffix = "M")
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price),
wise_metric = sum(str_detect(category_1, "Mountain")) / (sum(str_detect(category_1, "Road"))+0.00001)
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6, accuracy = 0.1, suffix = "M")
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price),
wise_metric = sum(str_detect(category_1, "Mountain")) / (sum(str_detect(category_1, "Road")) + 0.00001) %>% round(1)
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6, accuracy = 0.1, suffix = "M")
)
processed_data_tbl%>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price),
wise_metric = sum(str_detect(category_1, "Mountain")) / (sum(str_detect(category_1, "Road")) + 0.00001) %>% round(1)
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6, accuracy = 0.1, suffix = "M")
)
summary_values_tbl <- reactive({
processed_data_filtered_tbl() %>%
summarize(
health_metric = unique(order.id) %>% length(),
wealth_metric = sum(extended_price),
wise_metric = sum(str_detect(category_1, "Mountain")) / (sum(str_detect(category_1, "Road")) + 0.00001) %>% round(1)
) %>%
mutate(
health_metric = health_metric %>% scales::number(big.mark = ","),
wealth_metric = wealth_metric %>% scales::dollar(scale = 1e-6, accuracy = 0.1, suffix = "M")
)
})
library(shiny); runApp('K-State/GeoComp-APP/Codes/General Geographical App.R')
runApp('K-State/GeoComp-APP/Codes/General Geographical App.R')
runApp('K-State/Senegal-visualizing-data-app/Senegal App.R')
library(shiny); runApp('K-State/Senegal-visualizing-data-app/Senegal App.R')
library(shiny); runApp('K-State/Senegal-visualizing-data-app/Senegal App.R')
placeBase <- read.csv("C:/Users/gsantiago/Documents/K-State/Senegal-visualizing-data-app/Data/Full Data.csv")
View(placeBase)
place <- toString(names(subset(placeBase, select = c(1))))
period <- toString(names(subset(placeBase, select = c(2))))
showoptions <- names(subset(placeBase, select = -c(1,2)))
escolha <- showoptions[25]
escolha1 <- showoptions[30]
escolha2 <- showoptions[c(20,21)]
escolha3 <- showoptions[50]
escolha4 <- showoptions[15]
escolhas <- c(escolha, escolha1, escolha2, escolha3, escolha4)
nplaceBase <- placeBase %>%
filter(eval(parse(text = place)) == Dakar,
eval(parse(text = period)) == 2015) %>%
group_by(Years = eval(parse(text = period))) %>%
summarise_at(vars(escolhas), mean, na.rm=TRUE) %>%
ungroup() %>%
mutate_at(vars(-Year), scales::rescale)
library(dplyr)
nplaceBase <- placeBase %>%
filter(eval(parse(text = place)) == Dakar,
eval(parse(text = period)) == 2015) %>%
group_by(Years = eval(parse(text = period))) %>%
summarise_at(vars(escolhas), mean, na.rm=TRUE) %>%
ungroup() %>%
mutate_at(vars(-Year), scales::rescale)
nplaceBase <- placeBase %>%
filter(eval(parse(text = place)) == DAKAR,
eval(parse(text = period)) == 2015) %>%
group_by(Years = eval(parse(text = period))) %>%
summarise_at(vars(escolhas), mean, na.rm=TRUE) %>%
ungroup() %>%
mutate_at(vars(-Year), scales::rescale)
View(placeBase)
nplaceBase <- placeBase %>%
filter(eval(parse(text = place)) == DAKAR,
eval(parse(text = period)) == 2015) %>%
group_by(Years = eval(parse(text = period))) %>%
summarise_at(vars(escolhas), mean, na.rm=TRUE) %>%
ungroup() %>%
mutate_at(vars(-Year), scales::rescale)
nplaceBase <- placeBase %>%
filter(eval(parse(text = place)) == 'DAKAR',
eval(parse(text = period)) == 2015) %>%
group_by(Years = eval(parse(text = period))) %>%
summarise_at(vars(escolhas), mean, na.rm=TRUE) %>%
ungroup() %>%
mutate_at(vars(-Year), scales::rescale)
View(placeBase)
nplaceBase <- placeBase %>%
filter(eval(parse(text = place)) == 'DAKAR',
eval(parse(text = period)) == 2015) %>%
group_by(Years = eval(parse(text = period))) %>%
summarise_at(vars(escolhas), mean, na.rm=TRUE) %>%
ungroup() %>%
mutate_at(vars(-Years), scales::rescale)
View(nplaceBase)
nplaceBase[is.na(nplaceBase)] = 0
View(nplaceBase)
local <-
nplaceBase <- placeBase %>%
filter(eval(parse(text = place)) == 'DAKAR',
eval(parse(text = period)) %in% c(2015,2016,2017)) %>%
group_by(Years = eval(parse(text = period))) %>%
summarise_at(vars(escolhas), mean, na.rm=TRUE) %>%
ungroup() %>%
mutate_at(vars(-Years), scales::rescale)
View(local)
nplaceBase[is.na(nplaceBase)] = 0
ggplotly(nplaceBase())
library(plotly)
library(ggradar)
nplaceBase() %>%
ggradar(
font.radar = "roboto",
grid.label.size = 2.5,
axis.label.size = 3,
group.point.size = 3
) +
theme(
legend.position = "top",
legend.justification = c(1, 0),
legend.text = element_text(size = 8, family = "roboto"),
legend.key = element_rect(fill = NA, color = NA),
legend.background = element_blank()
)
nplaceBase %>%
ggradar(
font.radar = "roboto",
grid.label.size = 2.5,
axis.label.size = 3,
group.point.size = 3
) +
theme(
legend.position = "top",
legend.justification = c(1, 0),
legend.text = element_text(size = 8, family = "roboto"),
legend.key = element_rect(fill = NA, color = NA),
legend.background = element_blank()
)
ggplotly(nplaceBase())
ggplotly(nplaceBase)
View(nplaceBase)
library(shiny); runApp('K-State/Senegal-visualizing-data-app/Senegal App.R')
runApp('K-State/Senegal-visualizing-data-app/Senegal App.R')
runApp('K-State/Senegal-visualizing-data-app/Senegal App.R')
library(shiny); runApp('K-State/Senegal-visualizing-data-app/Senegal App.R')
runApp('K-State/Senegal-visualizing-data-app/Senegal App.R')
